using System;
using System.Collections.Generic;
using System.Linq;
using Il2CppSystem;
using KernelClient.Utils;
using KernelClient.Wrapper;
using ReMod.Core.UI.QuickMenu;
using UnhollowerRuntimeLib;
using UnityEngine;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.UI.Elements;

namespace KernelClient.Modules.Exploits
{
	// Token: 0x020000A9 RID: 169
	internal class Fly : KernelModule
	{
		// Token: 0x06000486 RID: 1158 RVA: 0x0001A684 File Offset: 0x00018884
		public override void OnUiManagerInit()
		{
			ReMenuCategory category = MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Movement).GetCategory(CatagoryNames.Movement);
			category.AddToggle("Flight", "Toggle flight movement", new Action<bool>(this.ToggleFly), this._isFlying);
			category.AddToggle("Double Tap Jump", "Enable double-tap jump for flight", delegate(bool s)
			{
				this._doubleTapEnabled = s;
			}, this._doubleTapEnabled);
			ReMenuSliderCategory reMenuSliderCategory = MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Movement).AddSliderCategory("Flight Settings", "purple");
			reMenuSliderCategory.AddSlider("Speed", "", delegate(float s)
			{
				this._flySpeed = s;
			}, this._flySpeed, 1f, 500f, "#ffffff");
			reMenuSliderCategory.AddSlider("Boost Multiplier", "", delegate(float s)
			{
				this._boostMultiplier = s;
			}, this._boostMultiplier, 1f, 10f, "#ffffff");
			reMenuSliderCategory.AddSlider("Double Tap Time", "", delegate(float s)
			{
				this._doubleTapInterval = s;
			}, this._doubleTapInterval, 0.1f, 1f, "#ffffff");
		}

		// Token: 0x06000487 RID: 1159 RVA: 0x0001A7B4 File Offset: 0x000189B4
		private void ToggleFly(bool enable)
		{
			this._isFlying = enable;
			this.InitializeCamera();
			if (enable)
			{
				this.EnableNoclip();
				Physics.gravity = Vector3.zero;
			}
			else
			{
				this.DisableNoclip();
				Physics.gravity = new Vector3(0f, -9.81f, 0f);
			}
		}

		// Token: 0x06000488 RID: 1160 RVA: 0x0001A810 File Offset: 0x00018A10
		private void EnableNoclip()
		{
			bool flag = VRCPlayer.field_Internal_Static_VRCPlayer_0 == null;
			if (!flag)
			{
				foreach (Collider collider in from c in Object.FindObjectsOfType<Collider>()
					where c.enabled && !this._blacklistedComponents.Any((Type type) => c.GetComponent(type) != null)
					select c)
				{
					bool flag2 = !this._disabledColliders.Contains(collider);
					if (flag2)
					{
						collider.enabled = false;
						this._disabledColliders.Add(collider);
					}
				}
			}
		}

		// Token: 0x06000489 RID: 1161 RVA: 0x0001A8A8 File Offset: 0x00018AA8
		private void DisableNoclip()
		{
			foreach (Collider collider in this._disabledColliders)
			{
				bool flag = collider != null;
				if (flag)
				{
					collider.enabled = true;
				}
			}
			this._disabledColliders.Clear();
		}

		// Token: 0x0600048A RID: 1162 RVA: 0x0001A918 File Offset: 0x00018B18
		public override void OnUpdate()
		{
			bool flag = this._doubleTapEnabled && Input.GetKeyDown(32);
			if (flag)
			{
				bool flag2 = Time.time - this._lastJumpTime <= this._doubleTapInterval;
				if (flag2)
				{
					this.ToggleFly(!this._isFlying);
				}
				this._lastJumpTime = Time.time;
			}
			bool flag3 = Input.GetKey(306) && Input.GetKeyDown(102);
			if (flag3)
			{
				this.ToggleFly(!this._isFlying);
			}
			bool isFlying = this._isFlying;
			if (isFlying)
			{
				this.HandleFlight();
			}
		}

		// Token: 0x0600048B RID: 1163 RVA: 0x0001A9B0 File Offset: 0x00018BB0
		private void HandleFlight()
		{
			VRCPlayer field_Internal_Static_VRCPlayer_ = VRCPlayer.field_Internal_Static_VRCPlayer_0;
			bool flag = field_Internal_Static_VRCPlayer_ == null;
			if (!flag)
			{
				this.InitializeCamera();
				float num = (Input.GetKey(304) ? (this._flySpeed * this._boostMultiplier) : this._flySpeed);
				Vector3 vector = Vector3.zero;
				bool isInVR = PlayerUtil.IsInVR;
				if (isInVR)
				{
					vector += this._cameraTransform.forward * Input.GetAxis("Vertical");
					vector += this._cameraTransform.right * Input.GetAxis("Horizontal");
					vector += Vector3.up * Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical");
				}
				else
				{
					bool key = Input.GetKey(119);
					if (key)
					{
						vector += this._cameraTransform.forward;
					}
					bool key2 = Input.GetKey(115);
					if (key2)
					{
						vector -= this._cameraTransform.forward;
					}
					bool key3 = Input.GetKey(100);
					if (key3)
					{
						vector += this._cameraTransform.right;
					}
					bool key4 = Input.GetKey(97);
					if (key4)
					{
						vector -= this._cameraTransform.right;
					}
					bool key5 = Input.GetKey(101);
					if (key5)
					{
						vector += Vector3.up;
					}
					bool key6 = Input.GetKey(113);
					if (key6)
					{
						vector -= Vector3.up;
					}
				}
				bool flag2 = vector.sqrMagnitude > 0.1f;
				if (flag2)
				{
					vector = vector.normalized;
					field_Internal_Static_VRCPlayer_.transform.position += vector * num * Time.deltaTime;
				}
			}
		}

		// Token: 0x0600048C RID: 1164 RVA: 0x0001AB68 File Offset: 0x00018D68
		private void InitializeCamera()
		{
			bool flag = this._cameraTransform == null || this._cameraTransform != VRCVrCamera.field_Private_Static_VRCVrCamera_0.field_Public_Camera_0.transform;
			if (flag)
			{
				this._cameraTransform = VRCVrCamera.field_Private_Static_VRCVrCamera_0.field_Public_Camera_0.transform;
			}
		}

		// Token: 0x04000317 RID: 791
		private List<Collider> _disabledColliders = new List<Collider>();

		// Token: 0x04000318 RID: 792
		private Transform _cameraTransform;

		// Token: 0x04000319 RID: 793
		private bool _isFlying;

		// Token: 0x0400031A RID: 794
		private float _flySpeed = 8f;

		// Token: 0x0400031B RID: 795
		private float _boostMultiplier = 3f;

		// Token: 0x0400031C RID: 796
		private bool _doubleTapEnabled;

		// Token: 0x0400031D RID: 797
		private float _doubleTapInterval = 0.3f;

		// Token: 0x0400031E RID: 798
		private float _lastJumpTime;

		// Token: 0x0400031F RID: 799
		private readonly List<Type> _blacklistedComponents = new List<Type>
		{
			Il2CppType.Of<VRC_Pickup>(),
			Il2CppType.Of<QuickMenu>(),
			Il2CppType.Of<VRC_AvatarPedestal>(),
			Il2CppType.Of<VRC_UiShape>(),
			Il2CppType.Of<VRCUiShape>()
		};
	}
}
