using System;
using System.Collections.Generic;
using Il2CppSystem.Collections.Generic;
using KernelClient.Utils;
using KernelClient.Wrapper;
using MelonLoader;
using ReMod.Core.UI.QuickMenu;
using UnityEngine;
using VRC;
using VRC.Core;
using VRC.SDK3.Components;

namespace Vitality.Modules.Exploits
{
	// Token: 0x02000044 RID: 68
	internal class ESP : KernelModule
	{
		// Token: 0x06000192 RID: 402 RVA: 0x0000AE9C File Offset: 0x0000909C
		public override void OnUiManagerInit()
		{
			ReMenuCategory category = MenuSetup._uiManager.QMMenu.GetCategoryPage(PageNames.Utility).GetCategory(CatagoryNames.ESP);
			Action<bool> action = delegate(bool s)
			{
				this.esp = s;
				this.ESPToggle(s);
			};
			category.AddToggle("Player orb ESP", "", action, true);
			Action<bool> action2 = delegate(bool s)
			{
				this.itemesp = s;
				this.ToggleItemESP(s);
			};
			category.AddToggle("Item ESP", "", action2, true);
			ESP.playerList = new List<string>();
			this.fxsetup();
		}

		// Token: 0x06000193 RID: 403 RVA: 0x0000AF1C File Offset: 0x0000911C
		private void fxsetup()
		{
			HighlightsFX field_Private_Static_HighlightsFX_ = HighlightsFX.field_Private_Static_HighlightsFX_0;
			ESP.highlightsFXStandaloneIdiot = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneIdiot.highlightColor = PlayerUtil.Troll();
			ESP.highlightsFXStandalone = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandalone.highlightColor = PlayerUtil.Visitor();
			ESP.highlightsFXStandaloneNewUser = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneNewUser.highlightColor = PlayerUtil.NewUser();
			ESP.highlightsFXStandaloneUser = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneUser.highlightColor = PlayerUtil.User();
			ESP.highlightsFXStandaloneKnown = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneKnown.highlightColor = PlayerUtil.Known();
			ESP.highlightsFXStandaloneTrusted = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneTrusted.highlightColor = PlayerUtil.Trusted();
			ESP.highlightsFXStandaloneFriend = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneFriend.highlightColor = PlayerUtil.Friend();
			ESP.highlightsFXStandaloneTeal = field_Private_Static_HighlightsFX_.gameObject.AddComponent<HighlightsFXStandalone>();
			ESP.highlightsFXStandaloneTeal.highlightColor = new Color(0f, 0.128f, 0.128f, 1f);
			ESP.highlightsFXStandaloneTeal.blurSize = 0.09f;
			ESP.highlightsFXStandaloneTeal.blurIterations = 0;
			ESP.highlightsFXStandaloneTeal.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneIdiot.blurSize = 0.09f;
			ESP.highlightsFXStandaloneIdiot.blurIterations = 0;
			ESP.highlightsFXStandaloneIdiot.blurDownsampleFactor = 0;
			ESP.highlightsFXStandalone.blurSize = 0.09f;
			ESP.highlightsFXStandalone.blurIterations = 0;
			ESP.highlightsFXStandalone.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneNewUser.blurSize = 0.09f;
			ESP.highlightsFXStandaloneNewUser.blurIterations = 0;
			ESP.highlightsFXStandaloneNewUser.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneUser.blurSize = 0.09f;
			ESP.highlightsFXStandaloneUser.blurIterations = 0;
			ESP.highlightsFXStandaloneUser.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneKnown.blurSize = 0.09f;
			ESP.highlightsFXStandaloneKnown.blurIterations = 0;
			ESP.highlightsFXStandaloneKnown.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneTrusted.blurSize = 0.09f;
			ESP.highlightsFXStandaloneTrusted.blurIterations = 0;
			ESP.highlightsFXStandaloneTrusted.blurDownsampleFactor = 0;
			ESP.highlightsFXStandaloneFriend.blurSize = 0.09f;
			ESP.highlightsFXStandaloneFriend.blurIterations = 0;
			ESP.highlightsFXStandaloneFriend.blurDownsampleFactor = 0;
		}

		// Token: 0x06000194 RID: 404 RVA: 0x00002904 File Offset: 0x00000B04
		private void ESPToggle(bool enable)
		{
			ESP.ToggleESP(enable);
		}

		// Token: 0x06000195 RID: 405 RVA: 0x0000290E File Offset: 0x00000B0E
		public override void OnEnterWorld(ApiWorld world, ApiWorldInstance instance)
		{
			ESP.playerList = new List<string>();
			this.ToggleItemESP(this.itemesp);
			this.ESPToggle(this.esp);
		}

		// Token: 0x06000196 RID: 406 RVA: 0x0000B184 File Offset: 0x00009384
		public override void OnPlayerLeft(Player player)
		{
			bool flag = !(player != null);
			if (!flag)
			{
				try
				{
					bool flag2 = ESP.playerList.Contains(player.field_Private_APIUser_0.id);
					if (flag2)
					{
						ESP.playerList.Remove(player.field_Private_APIUser_0.id);
					}
				}
				catch (Exception ex)
				{
					MelonLogger.Msg(ex.Message);
				}
			}
		}

		// Token: 0x06000197 RID: 407 RVA: 0x0000246F File Offset: 0x0000066F
		public override void OnUpdate()
		{
		}

		// Token: 0x06000198 RID: 408 RVA: 0x0000B1F8 File Offset: 0x000093F8
		public override void OnPlayerJoined(Player player)
		{
			bool flag = player == null || player.field_Private_APIUser_0 == null;
			if (!flag)
			{
				bool flag2 = player.field_Private_APIUser_0.id == null;
				if (!flag2)
				{
					try
					{
						bool flag3 = ESP.playerList.Contains(player.field_Private_APIUser_0.id);
						if (!flag3)
						{
							ESP.HighlightPlayer(player, true);
						}
					}
					catch (Exception ex)
					{
						MelonLogger.Msg(ex.Message);
					}
				}
			}
		}

		// Token: 0x06000199 RID: 409 RVA: 0x0000B280 File Offset: 0x00009480
		private static HighlightsFX PlayerToFx(Player player)
		{
			List<string> tags = player.field_Private_APIUser_0.tags;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			foreach (string text in tags)
			{
				bool flag6 = text == "system_trust_troll";
				if (flag6)
				{
					flag = true;
				}
				bool flag7 = text == "system_trust_veteran";
				if (flag7)
				{
					flag2 = true;
				}
				bool flag8 = text == "system_trust_trusted";
				if (flag8)
				{
					flag3 = true;
				}
				bool flag9 = text == "system_trust_known";
				if (flag9)
				{
					flag4 = true;
				}
				bool flag10 = text == "system_trust_basic";
				if (flag10)
				{
					flag5 = true;
				}
			}
			bool flag11 = PlayerUtil.IsFriend(player);
			HighlightsFX highlightsFX;
			if (flag11)
			{
				highlightsFX = ESP.highlightsFXStandaloneFriend;
			}
			else
			{
				bool flag12 = flag;
				if (flag12)
				{
					highlightsFX = ESP.highlightsFXStandaloneIdiot;
				}
				else
				{
					bool flag13 = flag2;
					if (flag13)
					{
						highlightsFX = ESP.highlightsFXStandaloneTrusted;
					}
					else
					{
						bool flag14 = flag3;
						if (flag14)
						{
							highlightsFX = ESP.highlightsFXStandaloneKnown;
						}
						else
						{
							bool flag15 = flag4;
							if (flag15)
							{
								highlightsFX = ESP.highlightsFXStandaloneUser;
							}
							else
							{
								highlightsFX = (flag5 ? ESP.highlightsFXStandaloneNewUser : ESP.highlightsFXStandalone);
							}
						}
					}
				}
			}
			return highlightsFX;
		}

		// Token: 0x0600019A RID: 410 RVA: 0x0000B398 File Offset: 0x00009598
		public static void HighlightPlayer(Player player, bool highlighted)
		{
			try
			{
				Transform transform = player.transform.Find("SelectRegion");
				bool flag = ESP.playerList.Contains(player.field_Private_APIUser_0.id) || transform == null;
				if (!flag)
				{
					APIUser field_Private_APIUser_ = player.field_Private_APIUser_0;
					bool flag2 = field_Private_APIUser_ == null || field_Private_APIUser_.tags == null || field_Private_APIUser_.IsSelf;
					if (!flag2)
					{
						ESP.PlayerToFx(player).Render(transform.GetComponent<Renderer>(), highlighted);
						bool flag3 = !(player.Method_Internal_get_VRCPlayer_1() != null) || !(player.Method_Internal_get_VRCPlayer_1().field_Public_PlayerNameplate_0 != null);
						if (!flag3)
						{
							ESP.playerList.Add(player.field_Private_APIUser_0.id);
						}
					}
				}
			}
			catch (Exception ex)
			{
				MelonLogger.Error(ex);
			}
		}

		// Token: 0x0600019B RID: 411 RVA: 0x0000B47C File Offset: 0x0000967C
		public static void ToggleESP(bool toggle)
		{
			ESP.playerList = new List<string>();
			try
			{
				foreach (Player player in PlayerManager.Method_Public_Static_get_PlayerManager_0().field_Private_List_1_Player_0.ToArray())
				{
					ESP.HighlightPlayer(player, toggle);
				}
			}
			catch (Exception ex)
			{
				MelonLogger.Error(ex);
			}
		}

		// Token: 0x0600019C RID: 412 RVA: 0x0000B4FC File Offset: 0x000096FC
		public void ToggleItemESP(bool toggle)
		{
			foreach (VRCPickup vrcpickup in Object.FindObjectsOfType<VRCPickup>())
			{
				ESP.highlightsFXStandaloneTeal.AddRenderer(vrcpickup.GetComponent<Renderer>(), true);
				ESP.highlightsFXStandaloneTeal.Render(vrcpickup.GetComponent<Renderer>(), toggle);
			}
		}

		// Token: 0x0400010E RID: 270
		private static HighlightsFXStandalone highlightsFXStandaloneIdiot;

		// Token: 0x0400010F RID: 271
		private static HighlightsFXStandalone highlightsFXStandalone;

		// Token: 0x04000110 RID: 272
		private static HighlightsFXStandalone highlightsFXStandaloneNewUser;

		// Token: 0x04000111 RID: 273
		private static HighlightsFXStandalone highlightsFXStandaloneUser;

		// Token: 0x04000112 RID: 274
		private static HighlightsFXStandalone highlightsFXStandaloneKnown;

		// Token: 0x04000113 RID: 275
		private static HighlightsFXStandalone highlightsFXStandaloneTrusted;

		// Token: 0x04000114 RID: 276
		private static HighlightsFXStandalone highlightsFXStandaloneFriend;

		// Token: 0x04000115 RID: 277
		private static HighlightsFXStandalone highlightsFXStandaloneTeal;

		// Token: 0x04000116 RID: 278
		private static List<string> playerList;

		// Token: 0x04000117 RID: 279
		private bool itemesp = false;

		// Token: 0x04000118 RID: 280
		private bool esp = false;
	}
}
